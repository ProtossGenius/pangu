package mytest;

// define of import.
import  "fmt" as f;
// define of struct.
type Test struct {
  a int; // a int;
  b int;
  c int `json: 'cat'`;
}
// define of function defs.
type TestFunc1 func (a int, b int, c string) int ;
type TestFunc2 func (a int, b string, c string) (d int,e error) ;
type TestFunc3 func (a int, b string, c string) 
type TestFunc4 func (a int, b string, c string);
type TestFunc5 func (a int, b, c string);
type TestFunc6 func (a int, b, c string) (e, f, g can.hello)

// define of function; 
func main() {
  f.print("hello world!");
}
// define of function; 
func hello(a int) {
  f.print("only for test");
}

func test_calc() {
  asshole = 1 + 2 + 3; // normal add
  asshole = 2 * 3 * 4; // normal multi
  asshole = b = 3 * 4 * (1 + 5) * 6 / 7; // priority and '()'
  baga = 7 * a(10 * b[2] ,3); // function call && array-index
  bata = 6+ (7 > 5 ? 7 : 5); // 3-meta oper  ? :
  a := Type{byte: 1, hello:2}; // value define.
}

/*

// define of pipeline 
// ## pipeline like a function, have input and output.

// most simple pipeline.
pipeline PipeDemo1 (a From) (d To) {
  // all input will give Pipe1, Pipe1's all output give Pipe2
  //Pipe3's output as PipeDemo1's output.
  Pipe1 -> Pipe2 -> Pipe3
  // ===================================================================
  // ## assume Pipe3's output not same to PipeDemo1's output, have two way 
  // ===================================================================
  // ## way1: use Pipe3's output merge to new result. assume pipe3's result is (q Q)
  // Pipe1 -> Pipe2 -> Pipe3 -> [q.d, q.e, q.f] // or [d, e, f]
  // ## way2: define merge function.
  func merge(q Q) (d To) {
    return(To{q.d, q.e, q.f});
  }
}

// use more than one pipeline and merge result.
pipeline PipeDemo2 (a F1) (d T1) {
  // can choice what param pipeline need.
  def SelfP1 = Pipe1 -> Pipe2; // assume Pipe2's result is O1
  // can use function to trans PipeDemo2's param to Pipe3's param.
  def SelfP2 = Pipe3; // assume Pipe2's result is O2
  // merge result.
  func merge(a O1, b O1) {
    return(T1{a, b});
  }
}
// ## Node: You can also define SelfP1 outside. decide to you.
//====================================================================================
// ##     Self Define Pipeline.
//====================================================================================
type PipeSelf pipeline (i In) (o Out) {
  [READ_TYPE, READ_NAME, READ_BODY]
  // createProduct, if have product in factory, will not call this func.
  func createProduct() Out {}
  func accept(f factory, i In) {}
  // ## Node: there are two default step: START & FINISH
  // if step = FINISH, will pack output. 
  // ## Node: steps save in output. (o Out)
}
// define of interface.
type Interface interface {
  Accept(test Test) (bool, error); 
}

*/

